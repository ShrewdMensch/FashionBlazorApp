@page "/clothes-types"
@inject ITypeOfClothService TypeOfClothService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IMapper Mapper
@using Radzen
<!-- Page Header -->
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <h3 class="page-title">@Title</h3>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="admin-dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active">@Title</li>
            </ul>
        </div>
    </div>
</div>
<!-- /Page Header -->
<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-body">
                @if (TypeOfClothList == null)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="float-right mt-2 mr-2 mb-4">
                                <a @onclick="()=>EditClick(new TypeOfClothDto())" class="btn btn-primary btn-rounded float-right">
                                    <i class="fa fa-plus m-r-5"></i> Add New
                                </a>
                            </div>
                            <div class="float-right mt-2 mr-2">
                                <a class="btn btn-primary btn-rounded float-right" @onclick="DeleteAllTypeOfCloth">
                                    <i class="fa fa-trash m-r-5"></i> Delete All
                                </a>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="5"
                                        AllowSorting="true" Data="@TypeOfClothList" TItem="TypeOfClothDto" ColumnWidth="200px" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="TypeOfClothDto" Property="Name" Title="Name"/>
                                    <RadzenGridColumn TItem="TypeOfClothDto" Property="ProductionDays" Title="Production Day(s)" />
                                    <RadzenGridColumn TItem="TypeOfClothDto" Property="TotalNumberOfAccesories" Title="Accessories Count" />
                                    <RadzenGridColumn TItem="TypeOfClothDto" Property="MeasurementHeaders" Title="Meas. Headers Count">
                                        <Template Context="data">
                                            @data.MeasurementHeaders.Count()
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="TypeOfClothDto" Property="Id" Title="" Sortable="false" Filterable="false">
                                        <Template Context="data">
                                            <a class="btn btn-sm btn-primary m-1" @onclick="()=>DeleteTypeOfCloth(data)">
                                                <i class="fe fe-trash"></i> Delete
                                            </a>
                                            <a class="btn btn-sm btn-primary m-1" @onclick="()=>EditClick(data)">
                                                <i class="fe fe-pencil"></i> Edit
                                            </a>
                                        </Template>
                                    </RadzenGridColumn>
                                </Columns>
                            </RadzenGrid>
                        </div>
                    </div>
                    <TypeOfClothUpsertModal @ref="Modal" TypeOfCloth="TypeOfCloth" Title="TypeOfCloth"
                                            HandleSubmit="SubmitAction" IsSubmitting="IsSubmitProcessing" />
                }
            </div>
        </div>
    </div>
</div>

<DeleteConfirmation @ref="DeleteModal" HandleDelete="ConfirmDelete_Click"
                    IsProcessingStart="IsDeleteProcessing" HandleDeleteAll="ConfirmDeleteAll_Click" />

@code {
    private IEnumerable<TypeOfClothDto> TypeOfClothList { get; set; }
    private TypeOfClothInputModel TypeOfCloth { get; set; } = new TypeOfClothInputModel();
    private string Title { get; } = "Types Of Clothes";

    private TypeOfClothUpsertModal Modal { get; set; }

    private DeleteConfirmation DeleteModal { get; set; }

    private bool IsDeleteProcessing { get; set; } = false;

    private bool IsSubmitProcessing { get; set; } = false;

    private Guid DeleteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTypeOfCloths();

    }

    private async Task LoadTypeOfCloths()
    {
        TypeOfClothList = await TypeOfClothService.GetTypeOfCloths();
        StateHasChanged();
    }

    private void EditClick(TypeOfClothDto typeOfCloth)
    {
        if (typeOfCloth.Id != default)
        {

            TypeOfCloth = new TypeOfClothInputModel()
            {
                Id = typeOfCloth.Id,
                Name = typeOfCloth.Name,
                ProductionDays = typeOfCloth.ProductionDays,
                MeasurementHeaderId = typeOfCloth.MeasurementHeaders.Select(m => m.MeasurementHeaderId),
                Accessories = Mapper.Map<IEnumerable<TypeOfClothAccessoryDto>,
                IEnumerable<AccessoryWithQuantityDto>>(typeOfCloth.Accessories),
                IncurredExpenseId = typeOfCloth.IncurredExpenses.Select(i=>i.IncurredExpenseId)

            };
        }

        else
        {
            TypeOfCloth = new TypeOfClothInputModel();
        }

        Modal.Open();
        StateHasChanged();

    }

    private async Task SubmitAction()
    {
        await TypeOfClothService.CreateOrUpdateTypeOfCloth(TypeOfCloth);

        Modal.Close();

        if (TypeOfCloth.Id == default)
        {
            await JSRuntime.SweetAlertSuccess("TypeOfCloth Added Successfully!");
        }

        else
        {
            await JSRuntime.SweetAlertSuccess("TypeOfCloth Updated Successfully!");
        }

        await LoadTypeOfCloths();
    }

    private async Task DeleteTypeOfCloth(TypeOfClothDto typeOfCloth)
    {
        DeleteId = typeOfCloth.Id;
        DeleteModal.Name = typeOfCloth.Name;
        DeleteModal.Description = "TypeOfCloth";
        await JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsDeleteProcessing = true;

        if (isConfirmed && DeleteId != default)
        {
            await TypeOfClothService.DeleteTypeOfCloth(DeleteId);

            await LoadTypeOfCloths();

            await JSRuntime.SweetAlertSuccess("TypeOfCloth Deleted Successfully!");

        }

        await JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsDeleteProcessing = false;
    }

    private async Task DeleteAllTypeOfCloth()
    {

        DeleteModal.Description = "All";
        DeleteModal.Name = "TypeOfCloths";
        await JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDeleteAll_Click(bool isConfirmed)
    {
        IsDeleteProcessing = true;

        if (isConfirmed)
        {
            await TypeOfClothService.DeleteAllTypeOfCloths();
            await JSRuntime.SweetAlertSuccess("All TypeOfCloths Deleted Successfully!");
            await LoadTypeOfCloths();

        }

        await JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsDeleteProcessing = false;
    }
}
