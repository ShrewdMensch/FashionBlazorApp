@inject IAccessoryService AccessoryService
@inject IMeasurementHeaderService MeasurementService
@inject IIncurredExpenseService IncurredExpenseService
@using System.Linq

<EditForm Model="TypeOfClothData" OnValidSubmit="OnHandleSubmit">
    <!-- Modal -->
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog modal-lg  modal-dialog-centered modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@TitlePrefix @Title</h5>
                    <button @onclick="() => Close()" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <FluentValidationValidator />
                        <div class="form-group col-sm-6">
                            <label class="control-label" for="Edit_Name">
                                Name <span class="text-danger">*</span>
                            </label>
                            <InputText @bind-Value="TypeOfClothData.Name" placeholder="Name" class="form-control" type="text" />
                            <ValidationMessage For="()=>TypeOfClothData.Name" />
                        </div>
                        <div class="form-group col-sm-6">
                            <label class="control-label" for="Edit_Name">
                                Production Days <span class="text-danger">*</span>
                            </label>
                            <RadzenNumeric TValue="double" @bind-Value="TypeOfClothData.ProductionDays" Placeholder="Production Days" class="form-control" />
                            <ValidationMessage For="()=>TypeOfClothData.ProductionDays" />
                        </div>
                        <div class="col-sm-12 mt-3">
                            <div class="card">
                                <div class="card-header">
                                    <span class="card-title mb-0 font-weight-600">Measurement Headers</span>
                                </div>
                                <div class="row card-body">
                                    <RadzenCheckBoxList @bind-Value=@TypeOfClothData.MeasurementHeaderId TValue="Guid"
                                                        Data="@MeasurementHeaders" TextProperty="Name" ValueProperty="Id" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 mt-3">
                            <div class="card">
                                <div class="card-header">
                                    <span class="card-title mb-0 font-weight-600">Accessories</span>
                                </div>
                                <div class="row card-body">
                                    <div class="col-sm-12">
                                        <div class="table-responsive">
                                            <table id="accessoriesTable" class="table table-hover table-white">
                                                <thead>
                                                    <tr>
                                                        <th>SN</th>
                                                        <th>Name</th>
                                                        <th>Quantity (Specify 0 if not required)</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="accessoriesBody">
                                                    @{ var count = 0;}
                                                    @if (Accessories != null)
                                                    {
                                                        @foreach (var accessory in Accessories)
                                                        {
                                                            <tr>
                                                                <td>@(++count)</td>
                                                                <td>@accessory.Name</td>
                                                                <td>
                                                                    <RadzenNumeric TValue="int" @bind-Value="accessory.Quantity" Placeholder="Quantity" class="form-control" />
                                                                    <ValidationMessage For="()=>accessory.Quantity" />
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 mt-3">
                            <div class="card">
                                <div class="card-header">
                                    <span class="card-title mb-0 font-weight-600">Incurred Expenses</span>
                                </div>
                                <div class="row card-body">
                                    <RadzenCheckBoxList @bind-Value=@TypeOfClothData.IncurredExpenseId TValue="Guid"
                                                        Data="@IncurredExpenses" TextProperty="Name" ValueProperty="Id" />

                                </div>
                            </div>
                        </div>
                        @*<div class="col-sm-12 mt-3 form-group">
                                <div class="card">
                                    <div class="card-header">
                                        <span class="card-title mb-0 font-weight-600">Expense Type</span>
                                    </div>
                                    <div class="row card-body">
                                        <RadzenRadioButtonList @bind-Value=@TypeOfClothData.Type TValue="TypeOfClothType">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="@TypeOfClothType.Daily.ToString()" Value="@TypeOfClothType.Daily" />
                                                <RadzenRadioButtonListItem Text="@TypeOfClothType.Monthly.ToString()" Value="@TypeOfClothType.Monthly" />
                                                <RadzenRadioButtonListItem Text="@TypeOfClothType.Yearly.ToString()" Value="@TypeOfClothType.Yearly" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </div>
                                </div>
                            </div>*@
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="() => Close()" class="btn" data-dismiss="modal">
                        <i class="flaticon-cancel-12"></i>
                        Discard
                    </button>
                    @if (!IsSubmitting)
                    {
                        <button type="submit" class="btn btn-primary">Save</button>
                    }

                    else
                    {
                        <button class="btn btn-primary" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Save
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public TypeOfClothInputModel TypeOfCloth { get; set; } = new TypeOfClothInputModel();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool IsSubmitting { get; set; }

    public TypeOfClothInputModel TypeOfClothData { get; set; } = new TypeOfClothInputModel();

    private string TitlePrefix { get; set; }

    private IEnumerable<IncurredExpenseDto> IncurredExpenses { get; set; }
    private IEnumerable<EntityDto> MeasurementHeaders { get; set; }
    private IEnumerable<AccessoryWithQuantityDto> Accessories { get; set; }

    [Parameter]
    public EventCallback<EditContext> HandleSubmit { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;


    protected override async Task OnInitializedAsync()
    {
        IncurredExpenses = await IncurredExpenseService.GetIncurredExpenses();
        MeasurementHeaders = await MeasurementService.GetMeasurementHeaders();
        Accessories = await AccessoryService.GetAccessoriesForForm();
    }

    private void LoadAccessories()
    {
        foreach (var typeOfClothAccessory in TypeOfCloth.Accessories)
        {
            foreach (var accessory in Accessories)
            {
                if(typeOfClothAccessory.Id == accessory.Id)
                {
                    Accessories.FirstOrDefault(a => a.Id == accessory.Id).Quantity = typeOfClothAccessory.Quantity;
                }

            }
        };
    }

    protected override void OnParametersSet()
    {
        TypeOfClothData = TypeOfCloth;

        if (TypeOfCloth.Accessories != null)
        {
            @*Accessories = Accessories.Concat(TypeOfCloth.Accessories);

            Accessories = Accessories.GetDistinctAccessory();*@
        LoadAccessories();
    }

    if (TypeOfCloth.Id == default)
    {
        TitlePrefix = "Add New ";
    }
    else
    {
        TitlePrefix = "Edit ";
    }

    StateHasChanged();
}

public void Open()
{
    ModalDisplay = "block;";
    ModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
}

public void Close()
{
    ModalDisplay = "none";
    ModalClass = "";
    ShowBackdrop = false;
    StateHasChanged();
}

private async Task OnHandleSubmit()
{
    TypeOfClothData.Accessories = Accessories;

    await HandleSubmit.InvokeAsync();
}

}