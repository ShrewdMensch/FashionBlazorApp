@inject NavigationManager Navigation
@inject ITypeOfClothService TypeOfClothService

<EditForm Model="ReadyToWearData" OnValidSubmit="OnHandleSubmit">
    <!-- Modal -->
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@TitlePrefix ReadyToWear</h5>
                    @if (IsSubmitting || IsPhotoUploading)
                    {
                        <button disabled type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }

                    else
                    {
                        <button @onclick="() => Close()" type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }

                </div>
                <div class="modal-body">
                    <div class="row">
                        <FluentValidationValidator />
                        <div class="form-group col-sm-6">
                            <label class="control-label" for="name">
                                Name <span class="text-danger">*</span>
                            </label>
                            <InputText @bind-Value="ReadyToWearData.Name" class="form-control" id="name" />
                            <ValidationMessage For="()=>ReadyToWearData.Name" />
                        </div>
                        <div class="form-group col-sm-6">
                            <label class="control-label" for="clothType">
                                Type of Cloth <span class="text-danger">*</span>
                            </label>
                            <RadzenDropDown id="clothType" AllowClear="true" TValue="Guid" @bind-Value="ReadyToWearData.TypeOfClothId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                            Placeholder="Select type of cloth..." Data=@typeOfCloths TextProperty="Name" ValueProperty="Id" class="form-control" />
                            <ValidationMessage For="()=>ReadyToWearData.TypeOfClothId" />
                        </div>

                        <div class="form-group col-sm-6">
                            <label class="control-label" for="stockCount">
                                Number In Stock <span class="text-danger">*</span>
                            </label>
                            <RadzenNumeric id="stockCount" TValue="int" Min="0" @bind-Value=@ReadyToWearData.NumberInStock Placeholder="Number in stock" class="form-control" />
                            <ValidationMessage For="()=>ReadyToWearData.NumberInStock" />
                        </div>
                        <div class="form-group col-sm-6">
                            <label>
                                Upload Image(s) <span class="text-danger">*</span>
                            </label>
                            @if (ReadyToWearData.PhotoUrls == null || !ReadyToWearData.PhotoUrls.Any())
                            {
                                <InputFile required OnChange="HandleImageUpload" multiple class="form-control"></InputFile>
                            }
                            else
                            {

                                <InputFile OnChange="HandleImageUpload" multiple class="form-control"></InputFile>
                            }
                        </div>
                        <div class="form-group col-sm-12">
                            <div class="row">
                                @if (IsPhotoUploading)
                                {
                                    <div class="col-md-12">
                                        <span><i class="fa fa-spin fa-spinner"></i> Please wait.. Images are uploading...</span>
                                    </div>
                                }
                                @if (ReadyToWearData.PhotoUrls != null)
                                {
                                    foreach (var photo in ReadyToWearData.PhotoUrls)
                                    {
                                        <div class="col-md-3 mt-3">
                                            <div class="ready-to-wear-image" style="background: url('@photo') 50% 50%; ">
                                                <a class="ready-to-wear-image-title" @onclick="()=>OnPhotoDelete(photo)">
                                                    <i class="fa fa-trash"></i>
                                                </a>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (IsSubmitting || IsPhotoUploading)
                    {
                        <button type="button" disabled class="btn">
                            <i class="flaticon-cancel-12"></i>
                            Discard
                        </button>
                        @if (IsPhotoUploading)
                        {
                            <button type="button" disabled class="btn btn-primary">Save</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" type="submit" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Save
                            </button>

                        }
                    }

                    else
                    {
                        <button type="button" @onclick="() => Close()" class="btn" data-dismiss="modal">
                            <i class="flaticon-cancel-12"></i>
                            Discard
                        </button>

                        <button type="submit" class="btn btn-primary">Save</button>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public ReadyToWearDto ReadyToWear { get; set; } = new ReadyToWearDto();

    [Parameter]
    public bool IsSubmitting { get; set; }

    [Parameter]
    public bool IsPhotoUploading { get; set; }


    public ReadyToWearDto ReadyToWearData { get; set; } = new ReadyToWearDto();
    private string TitlePrefix { get; set; }
    private IEnumerable<TypeOfClothDto> typeOfCloths { get; set; }

    [Parameter]
    public EventCallback<EditContext> HandleSubmit { get; set; }

    [Parameter]
    public EventCallback<string> HandleDeletePhoto { get; set; }

    [Parameter]
    public EventCallback<bool> HandleDiscardButtonClicked { get; set; }

    [Parameter]
    public EventCallback<InputFileChangeEventArgs> HandleImageUpload { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;


    protected override async Task OnInitializedAsync()
    {
        typeOfCloths = await TypeOfClothService.GetTypeOfCloths();
    }

    protected override void OnParametersSet()
    {
        ReadyToWearData = ReadyToWear;

        if (ReadyToWear.Id == default)
        {
            TitlePrefix = "Add New ";
        }
        else
        {
            TitlePrefix = "Edit ";
        }

        StateHasChanged();
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public async Task Close()
    {
        await HandleDiscardButtonClicked.InvokeAsync(true);

        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();

    }

    private async Task OnHandleSubmit()
    {
        await HandleSubmit.InvokeAsync();
    }

    private async Task OnPhotoDelete(string photoUrl)
    {
        await HandleDeletePhoto.InvokeAsync(photoUrl);
    }

}